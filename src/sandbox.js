/*
This file was generated by https://github.com/pmndrs/gltfjsx and then
customized manually. It uses drei's new useAnimations hook which extracts
all actions and sets up a THREE.AnimationMixer for it so that you don't have to.
All of the assets actions, action-names and clips are available in its output. 
*/

import React, { useEffect, useRef, useState, useCallback } from "react"
import { useGLTF, useTexture, useAnimations, Billboard, Text, FlyControls, DeviceOrientationControls } from "@react-three/drei"
import { a, useSpring } from "@react-spring/three"
import { useFrame } from "@react-three/fiber"
import { Clock, } from "three"
import * as THREE from 'three';


let flyState = 0

let dialogState = 0





function Dialog() {
    
    const dialogRef = useRef()

    return (null)               
     

}






export function Charb(props) {
    // Fetch model and a separate texture
    const { nodes, materials, animations } = useGLTF("sparoch-ready-gltf.gltf")
    
    // Extract animation actions
    const { ref, actions, names } = useAnimations(animations)
    // Hover and animation-index states
    const [hovered, setHovered] = useState(false)
    const [index, setIndex] = useState(1)
    const [dialogCheck, setDialogCheck] = useState(false)

  

    // Animate the selection halo
    const { color, scale } = useSpring({ scale: hovered ? [1.15, 1.15, 1] : [1, 1, 1], color: hovered ? "hotpink" : "aquamarine" })
    // Change cursor on hover-state
    useEffect(() => void (document.body.style.cursor = hovered ? "pointer" : "auto"), [hovered])
    // Change animation when the index changes
    useEffect(() => {
        // Reset and fade in animation after an index has been changed
        actions[names[index]].reset().fadeIn(0.5).play()
        // In the clean-up phase, fade it out
        return () => actions[names[index]].fadeOut(0.5)
    }, [index, actions, names])


    function exitDial(e) {

        e.stopPropagation();
        
        alert("You have clicked. yes.")
        
        if (flyState == 3) {

            setHovered(false)

            flyState = 1;

           
        }

    

    

        console.log(`exit dial executed`);
        return(null)


    }

    return (



        <Billboard

            
            position={[200, 300, -10]}
            follow={true}
            lockX={false}
            lockY={false}
            lockZ={false} // Lock the rotation on the z axis (default=false)
        >



        </Billboard>

    )
}


export function Flight() {

    const flyRef = useRef()


    useFrame(() =>
    {
        if (flyState == 2 || flyState == 3) {

            flyRef.current.movementSpeed = 0
            flyRef.current.rollSpeed = 0


        }

        if (flyState == 0 || flyState == 1) {

            flyRef.current.movementSpeed = 20
            flyRef.current.rollSpeed = 1



        }

        

    })

    


    return (


        <FlyControls


            ref={flyRef}

            movementSpeed={20}

            dragToLook={false}

            rollSpeed={1}




        />

                

    )
            

}


useGLTF.preload("/sparoch-ready-gltf.gltf");