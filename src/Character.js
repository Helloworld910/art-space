/*
This file was generated by https://github.com/pmndrs/gltfjsx and then
customized manually. It uses drei's new useAnimations hook which extracts
all actions and sets up a THREE.AnimationMixer for it so that you don't have to.
All of the assets actions, action-names and clips are available in its output. 
*/

import React, { useEffect, useRef, useState } from "react"
import { useGLTF, useAnimations, Billboard, Text, FlyControls, Html } from "@react-three/drei"
import { a, useSpring } from "@react-spring/three"
import { useFrame } from "@react-three/fiber"
import { HandleUserData } from "./HandleUserData.js"




let flyState = 0

let dialogState = 0





const choiceUser = ["Hello! Who are you?", "blank", "blank",
    "Lorem ipsum dolor", "sit amet", "consectetuer adipiscing elit",
    "porttitor ut", "iaculis quis, sem.", "In sem justo",
    "commodo ut", "suscipit at,", "pharetra vitae",
    "non sapien", "Proin mattis lacinia", "Nam quis nulla.",
    "Aenean id metus", "id velit ullamcorper", "Phasellus enim erat",
    "vestibulum vel", "aliquam a, posuere", "Integer tempor.",
    "exercitation", "ullamco", "Etiam tristique non, ",
    "Ut enim ad", "submit", "submittwo",
    "Submit", "Donec iaculis", "venenatis quis, ante.",
    "consequat eget,", "sapien elit,", "Duis interdum suscipit,  ",
    "erat volutpat.", "ipsum. Aliquam", "Fusce aliquam vestibulum",
    "sollicitudin et, dolor.", "commodo et,", "sapien nunc.",
    "lmao", "I will exit now", "blank",
    "blank"
]




const dialSparoch = ["Hello there! How are you today?","Sed vel lectus.", "Integer malesuada",
    "molestie", "Morbi scelerisque", "luctus velit.",
    "Integer lacinia.", "Mauris tincidunt", "Enter your name now",
    "sem sed arcu.", "Nulla non lectus sed", "nisl molestie malesuada",
    "lmao", "okay bye"]





export function CharA(props) {


    const { nodes, materials, animations } = useGLTF("/sparoch-ready-gltf.gltf")
    // Extract animation actions
    const { ref, actions, names } = useAnimations(animations)
    // Hover and animation-index states
    const [hovered, setHovered] = useState(false)
    const [dialoG, setDialoG] = useState(false)
    const [talK, settalK] = useState(false)
    const [index, setIndex] = useState(1)
    const [choiceUserIndex, setchoiceUserIndex] = useState(0)
    const [dialIndex, setdialIndex] = useState(0)
    const [inputSwitch, setinputSwitch] = useState(false)
    // Animate the selection halo
    const { color, scale } = useSpring({ scale: hovered ? [1.15, 1.15, 1] : [1, 1, 1], color: hovered ? "cyan" : "aquamarine" })
    // Change cursor on hover-state
    useEffect(() => void (document.body.style.cursor = hovered ? "pointer" : "auto"), [hovered])
    // Change animation when the index changes
    useEffect(() => {
        // Reset and fade in animation after an index has been changed
        actions[names[index]].reset().fadeIn(0.5).play()
        // In the clean-up phase, fade it out
        return () => actions[names[index]].fadeOut(0.5)
    }, [index, actions, names])



    const [formValue, setformValue] = useState("")

    const handleSubmit = (event) => {
        event.preventDefault();
        setinputSwitch(false)
        setchoiceUserIndex(40)
        settalK(false)
        HandleUserData(formValue)
        setformValue("")

    }



    useEffect(() => {

        if (choiceUserIndex == 3) {

            setdialIndex(1)

        }

        if (choiceUserIndex == 7) {
            setdialIndex(2)
        }

        if (choiceUserIndex == 10) {

            setdialIndex(3)
        }



        if (choiceUserIndex == 13) {

            setdialIndex(4)

        }
        if (choiceUserIndex == 16) {

            setdialIndex(5)

        }

        if (choiceUserIndex == 19) {

            setdialIndex(6)

        }

        if (choiceUserIndex == 22) {

            setdialIndex(7)

        }

        if (choiceUserIndex == 25) {

            setdialIndex(8)

        }

        if (choiceUserIndex == 28) {

            setdialIndex(9)

        }


        if (choiceUserIndex == 31) {

            setdialIndex(10)

        }

        if (choiceUserIndex == 34) {

            setdialIndex(11)

        }

        if (choiceUserIndex == 37) {

            setdialIndex(12)

        }



        if (choiceUserIndex == 40) {

            setdialIndex(13)

        }

    }, [choiceUserIndex])

    
    

    return (


        <Billboard


            position={[200, 300, -10]}
            follow={true}
            lockX={false}
            lockY={false}
            lockZ={false} // Lock the rotation on the z axis (default=false)
        >


            


            <group ref={ref} {...props} dispose={null}>
                <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
                    <primitive object={nodes.mixamorigHips} />

                    <skinnedMesh

                        castShadow
                        receiveShadow
                        onPointerOver={() => setHovered(true)}
                        onPointerOut={() => setHovered(false)}
                        onClick={() => setIndex((index + 1) % names.length)}

                        name="Beta_Joints"
                        geometry={nodes.Beta_Joints.geometry}
                        material={materials.Beta_Joints_MAT}
                        skeleton={nodes.Beta_Joints.skeleton}
                    />
                    <skinnedMesh

                        castShadow
                        receiveShadow
                        onPointerOver={() => setHovered(true)}
                        onPointerOut={() => setHovered(false)}
                        onClick={() => setIndex((index + 1) % names.length)}

                        name="Beta_Surface"
                        geometry={nodes.Beta_Surface.geometry}
                        material={materials["asdf1:Beta_HighLimbsGeoSG2"]}
                        skeleton={nodes.Beta_Surface.skeleton}
                    />


                </group>

                <a.mesh

                    position={[0, 1, -1]}
                    scale={scale}
                    onPointerOver={() => {
                        if (flyState != 3) {

                            setHovered(true)
                            flyState = 2

                        }
                        }}
                    onPointerOut={() => {
                        if (flyState != 3) {

                            setHovered(false)
                            flyState = 1


                        }
                        }}
                    onClick={() => {
                        if (flyState != 3) {

                            
                            flyState = 3
                            setDialoG(!dialoG)
                            setIndex(0)
                            settalK(true)

                        }
                        }}

                >



                    <circleGeometry args={[1, 42]} />

                    <a.meshStandardMaterial color={color} />

                </a.mesh>


                <Text

                    position={[0, 2.2, 0]}

                    fontSize={0.13}
                    font={"Philosopher"}
                    color={"white"}
                    

                >


                    {dialSparoch[dialIndex]}

                </Text>

                <mesh
                    visible={dialoG}
                    position={[1.5, 1, 0.3]}
                    onClick={() => {
                        if (index == 0) {

                            setIndex(1)

                        }
                        flyState = 1
                        setDialoG(!dialoG)
                        settalK(false)
                        setHovered(false)
                        setchoiceUserIndex(0)
                        setdialIndex(0)
                        setinputSwitch(false)
                    }}


                >

                    <planeGeometry args={[1.3,0.7]} />

                    <meshStandardMaterial color={"red"} />

                    <Text
                        fontSize={0.1}
                        font={"Philosopher"}
                        color={"white"}
                        
                        maxWidth={1.3}
                        textAlign={"center"}
                    >
                        I don't want to talk to you. Sorry.
                    </Text>

                </mesh>

                //choice button one

                <mesh
                    visible={dialoG}
                    position={[-1.5, 0.2, 0.3]}
                    onClick={() => {

                        if (dialIndex == 0) {

                            setchoiceUserIndex(3)


                        }
                        if (dialIndex == 1) {
                            setchoiceUserIndex(13)

                        }

                        if (dialIndex == 2) {
                            setchoiceUserIndex(22)
                            
                        }

                        if (dialIndex == 3) {

                            setchoiceUserIndex(31)
                            
                        }


                        if (dialIndex == 4) {
                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 5) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 6) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 7) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 8) {

                            //Input Submit Button
                            setinputSwitch(false)
                            setchoiceUserIndex(40)
                            settalK(false)
                            HandleUserData(formValue)
                            setformValue("")
                        }

                        if (dialIndex == 9) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 10) {

                            setchoiceUserIndex(40)
                            settalK(false)

                        }

                        if (dialIndex == 11) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 12) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }


                        if (dialIndex == 13) {

                            if (index == 0) {

                                setIndex(1)

                            }
                            flyState = 1
                            setDialoG(!dialoG)

                            setHovered(false)
                            setchoiceUserIndex(0)
                            setdialIndex(0)

                        }

                    }}

                >

                    <planeGeometry args={[1.3, 0.7]} />

                    <meshStandardMaterial color={"blue"} />

                    <Text
                        fontSize={0.1}
                        font={"Philosopher"}
                        color={"white"}

                        maxWidth={1.3}
                        textAlign={"center"}
                    >
                        {choiceUser[choiceUserIndex]}
                    </Text>

                </mesh>

                //button 2


                <mesh
                    visible={talK}
                    position={[-1.5, 0.95, 0.3]}
                    onClick={() => {

                        if (dialIndex == 0) {
                            setchoiceUserIndex(7)
                        }

                        if (dialIndex == 1) {
                            setchoiceUserIndex(16)

                        }

                        if (dialIndex == 2) {
                            setchoiceUserIndex(25)
                            setinputSwitch(true)
                            settalK(false)
                        }

                        if (dialIndex == 3) {

                            setchoiceUserIndex(34)

                        }


                        if (dialIndex == 4) {
                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 5) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 6) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 7) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 8) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 9) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 10) {

                            setchoiceUserIndex(40)
                            settalK(false)

                        }

                        if (dialIndex == 11) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 12) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }



                    }}


                >

                    <planeGeometry args={[1.3, 0.7]} />

                    <meshStandardMaterial color={"blue"} />

                    <Text
                        fontSize={0.1}
                        font={"Philosopher"}
                        color={"white"}

                        maxWidth={1.3}
                        textAlign={"center"}
                    >
                        {choiceUser[choiceUserIndex + 1]}
                    </Text>

                </mesh>

                <mesh
                    visible={talK}
                    position={[-1.5, 1.7, 0.3]}
                    onClick={() => {

                        if (dialIndex == 0) {
                            setchoiceUserIndex(10)
                        }


                        if (dialIndex == 1) {
                            setchoiceUserIndex(19)

                        }

                        if (dialIndex == 2) {
                            setchoiceUserIndex(28)

                        }

                        if (dialIndex == 3) {

                            setchoiceUserIndex(37)

                        }


                        if (dialIndex == 4) {
                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 5) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 6) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 7) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 8) {

                            setchoiceUserIndex(40)
                            settalK(false)

                        }

                        if (dialIndex == 9) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 10) {

                            setchoiceUserIndex(40)
                            settalK(false)

                        }

                        if (dialIndex == 11) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 12) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                    }}


                >

                    <planeGeometry args={[1.3, 0.7]} />

                    <meshStandardMaterial color={"blue"} />

                    <Text
                        fontSize={0.1}
                        font={"Philosopher"}
                        color={"white"}

                        maxWidth={1.3}
                        textAlign={"center"}
                    >
                        {choiceUser[choiceUserIndex + 2]}
                    </Text>

                </mesh>


                <mesh
                    scale={inputSwitch? 1:0}
                    position={[-1.5, 1.7, 0.3]}
                >


                    <planeGeometry args={[1.3, 1]} />

                    <meshStandardMaterial
                        color={"green"}
                        transparent={true}
                        opacity={0}
                        
                    />

                    <Html

                        transform={true}
                        prepend={true}
                    >

                        <div>

                            <form

                                

                                onSubmit={handleSubmit}
                            >


                                <input
                                    size={4}
                                    fontSize={0.3}
                                    placeholder={"..."}
                                    value={formValue}
                                    onChange={(e) => setformValue(e.target.value)}

                                />

                            </form>
                        </div>


                    </Html>


                </mesh>

           

            </group>


        </Billboard>

    )
}


export function Flight() {

    const flyRef = useRef()


    useFrame(() =>
    {
        if (flyState == 2 || flyState == 3) {

            flyRef.current.movementSpeed = 0
            flyRef.current.rollSpeed = 0


        }

        if (flyState == 0 || flyState == 1) {

            flyRef.current.movementSpeed = 20
            flyRef.current.rollSpeed = 1



        }

        

    })

    


    return (


        <FlyControls


            ref={flyRef}

            movementSpeed={20}

            dragToLook={false}

            rollSpeed={1}




        />

                

    )
            

}

export function handleSubmit() {

  

}


useGLTF.preload("/sparoch-ready-gltf.gltf");