/*
This file was generated by https://github.com/pmndrs/gltfjsx and then
customized manually. It uses drei's new useAnimations hook which extracts
all actions and sets up a THREE.AnimationMixer for it so that you don't have to.
All of the assets actions, action-names and clips are available in its output. 
*/

import React, { useEffect, useRef, useState } from "react"
import { useGLTF, useAnimations, Billboard, Text, FlyControls, Html } from "@react-three/drei"
import { a, useSpring } from "@react-spring/three"
import { useFrame, useThree } from "@react-three/fiber"
import { handleSubmit } from "./inputHandle.js"
import { analytics } from "./firebaseCon.js"
import { logEvent } from "firebase/analytics";
import * as THREE from "three"



let flyState = 0

let dialogState = 0





const choiceUser = ["Yes! Where am I?", "Isn't everyone?", "I am wandering. Who are you?",
    "Never heard of 'Deastra' before..", "I see. Are there others here?", "New? I think I saw a fossil in one of the planets!",
    "porttitor ut", "No thank you.", "Yes I would like that.",
    "Maybe next time.", "Why are you trapped?", "You don't look trapped to me.",
    "Can I help free you?", "Yes, I'll go find my way.", "I know where I am now.",
    "Well, I think you are too.", "Wow! I'll go see if they want to be friends.", "Okay.. I'll be carefull.",
    "Sounds like rumours. I'll go explore.", "Look forward to spring then.", "Pity I missed it.",
    "I'll go find my path.", "Yes, I like staying Anonymous.", "I just can't think of a good note right now.",
    "Maybe I'll think about it.", "Submit", "submitone",
    "submittwo", "So do I.", "And I will go enjoy now.",
    "Don't count on it though.", "Well, I dont believe in prophecies. Bye.", "Sounds fun, I'd like to be trapped by prophecies too.",
    "I'll go see if I can help you find the note.", "I see. I would like to help.", "You are just trapping yourself. I'll fly away now.",
    "I'll go look for this note.", "Lmao. I'll fly away now.", "Old tounges are often wrong. That's what I have to say.",
    "I can help with that. I do not like Lords myself.", "Perhaps", "blank",
    "blank"
]




const dialSparoch = ["Hello friend! Are you lost?","You are in Deastra, my friend. It is an ancient place. But from some ways, seems quite new.", "In way, I suppose. Some like to leave a mark. Notes, that they want others to read. Would you like to do that as well?",
    "I am Sparoch! I too like to wander. But I find myself trapped!", "For long the path here was found only in the knowledge of forsaken travellers that were lost. Perhaps, that is changing. Or wait! Didn't you say you were lost too?", "Right now, there's just me, you, and....well...the records are yet incomplete, but, it is often heard that those 'rings' are alive.",
    "Ah yes. That's Threya. Used to be brimming with life. The most beautiful blooms. I do miss those. But from a different path, spring comes to it soon.", "Ah, you like to keep your notes to yourself, do you? Well in that you are not alone.", "Then please do. If I pass your note and its on display, you'll get an email.",
    "I look forward to that time.", "A prophecy binds me. It is said in an old tounge that I am to pass on a note. Destined for Amre'hsa. Sent by Leo. Cursed apart by a million years, this note binds them still. And, it is to come to me. Here! Soon! Then, I will pass it along and be finally free.", "I assure you, I am. I am bound by a prophecy to wait here till I pass on Leo's note to Amre'hsa. It comes from 7000 years ago and is to travel 3000 more. In defiance to the cruel Lords who, jealous, cursed them apart by a million years.",
    "I am bound by a prophecy spoken in the old tounge. I am to be here till I pass on a note. From Leo to Amre'hsa sent thousands of years ago. And is to travel thousand years more. In defiance of the Lords who cursed them apart by a million years.", "Then perhaps, we will speak again."]




export function CharA(props) {


    const { nodes, materials, animations } = useGLTF("/sparoch-ready-gltf.gltf")
    // Extract animation actions
    const { ref, actions, names } = useAnimations(animations)
    // Hover and animation-index states
    const [hovered, setHovered] = useState(false)
    const [dialoG, setDialoG] = useState(false)
    const [talK, settalK] = useState(false)
    const [index, setIndex] = useState(1)
    const [choiceUserIndex, setchoiceUserIndex] = useState(0)
    const [dialIndex, setdialIndex] = useState(0)
    const [inputSwitch, setinputSwitch] = useState(false)
    const [nameValue, setnameValue] = useState("")
    const [feedValue, setfeedValue] = useState("")
    const [nickValue, setnickValue] = useState("")
    const [nearNow, setnearNow] = useState(false)


    var mobileTest = false

    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(navigator.userAgent)) {
        // Take the user to a different screen here.
        mobileTest = true
    }


    // Animate the selection halo
    const { color, scale } = useSpring({ scale: hovered ? [1.15, 1.15, 1] : [1, 1, 1], color: hovered ? "cyan" : "aquamarine" });
    // Change cursor on hover-state
    useEffect(() => void (document.body.style.cursor = hovered ? "pointer" : "auto"), [hovered])
    // Change animation when the index changes
    useEffect(() => {




        // Reset and fade in animation after an index has been changed

        actions[names[index]].reset().fadeIn(0.5).play()

        // In the clean-up phase, fade it out

        return () => actions[names[index]].fadeOut(0.5)

        
    }, [index, actions, names])






    useEffect(() => {

        if (choiceUserIndex == 3) {

            setdialIndex(1)

        }

        if (choiceUserIndex == 7) {
            setdialIndex(2)
        }

        if (choiceUserIndex == 10) {

            setdialIndex(3)
        }



        if (choiceUserIndex == 13) {

            setdialIndex(4)

        }
        if (choiceUserIndex == 16) {

            setdialIndex(5)

        }

        if (choiceUserIndex == 19) {

            setdialIndex(6)

        }

        if (choiceUserIndex == 22) {

            setdialIndex(7)

        }

        if (choiceUserIndex == 25) {

            setdialIndex(8)

        }

        if (choiceUserIndex == 28) {

            setdialIndex(9)

        }


        if (choiceUserIndex == 31) {

            setdialIndex(10)

        }

        if (choiceUserIndex == 34) {

            setdialIndex(11)

        }

        if (choiceUserIndex == 37) {

            setdialIndex(12)

        }



        if (choiceUserIndex == 40) {

            setdialIndex(13)

        }

    }, [choiceUserIndex])

    
    const state = useThree()
    const billRef = useRef()

    var distance

    useFrame(() => {

        distance = state.camera.position.distanceTo(billRef.current.position)


        if (distance < 10) {

            setnearNow(true)
            logEvent(analytics, 'Reached Sparoch');
        }

        if (distance > 10) {

            setnearNow(false)

        }

    })


    const sparochTalkPosition = new THREE.Vector3(200, 301, -11);
    const exitTalkPosition = new THREE.Vector3(0, 0, 0);
    

    return (


        <Billboard

            ref={billRef}
            position={[200, 300, -10]}
            follow={true}
            lockX={false}
            lockY={false}
            lockZ={false} // Lock the rotation on the z axis (default=false)
        >


            


            <group ref={ref} {...props} dispose={null}>
                <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
                    <primitive object={nodes.mixamorigHips} />

                    <skinnedMesh

                        castShadow
                        receiveShadow
                        onPointerOver={() => setHovered(true)}
                        onPointerOut={() => setHovered(false)}
                        onClick={() => setIndex((index + 1) % names.length)}

                        name="Beta_Joints"
                        geometry={nodes.Beta_Joints.geometry}
                        material={materials.Beta_Joints_MAT}
                        skeleton={nodes.Beta_Joints.skeleton}
                    />
                    <skinnedMesh

                        castShadow
                        receiveShadow
                        onPointerOver={() => setHovered(true)}
                        onPointerOut={() => setHovered(false)}
                        onClick={() => setIndex((index + 1) % names.length)}

                        name="Beta_Surface"
                        geometry={nodes.Beta_Surface.geometry}
                        material={materials["asdf1:Beta_HighLimbsGeoSG2"]}
                        skeleton={nodes.Beta_Surface.skeleton}
                    />


                </group>

                <a.mesh

                    position={[0, 1, -1]}
                    scale={scale}
                    onPointerOver={() => {

                        if (nearNow == true) {

                            if (flyState != 3) {

                                setHovered(true)
                                flyState = 2

                            }


                        }


                    }}

                    onPointerOut={() => {

                        if (nearNow == true) {


                            if (flyState != 3) {

                                setHovered(false)
                                flyState = 1


                            }
                        }


                    }}

                    onClick={() => {
                        if (nearNow == true) {


                            if (flyState != 3) {


                                flyState = 3

                                if (mobileTest == true) {
                                    state.camera.position.set(200, 300, 2);

                                }
                                if (mobileTest == false) {
                                    state.camera.position.set(200, 300, -6);

                                }
                                state.camera.lookAt(sparochTalkPosition);
                                
                                
                                



                                setDialoG(!dialoG)
                                setIndex(0)
                                settalK(true)

                                logEvent(analytics, 'Entered Conversation');
                            }
                        }

                    }
                    }

                >



                    <circleGeometry args={[1, 42]} />

                    <a.meshStandardMaterial color={color} />

                </a.mesh>


                <Text

                    position={[0, 2.9, 0]}
                    
                    maxWidth={2}
                    textAlign={"center"}
                    fontSize={0.15}
                    font={"Philosopher"}
                    color={"white"}
                    

                >


                    {dialSparoch[dialIndex]}

                </Text>

                <mesh
                    scale={dialoG ? 1:0}
                    position={[1.5, 1, 0.3]}
                    onClick={() => {
                        if (index == 0) {

                            setIndex(1)

                        }
                        flyState = 1
                        setDialoG(!dialoG)
                        settalK(false)
                        setHovered(false)
                        setchoiceUserIndex(0)
                        setdialIndex(0)
                        setinputSwitch(false)
                        state.camera.lookAt(exitTalkPosition);

                        logEvent(analytics, 'Exit Conversation Hard');
                        
                    }}


                >

                    <planeGeometry args={[1.3,0.7]} />

                    <meshStandardMaterial color={"red"} />

                    <Text
                        fontSize={0.15}
                        font={"Philosopher"}
                        color={"white"}
                        
                        maxWidth={1.3}
                        textAlign={"center"}
                    >
                        I don't want to talk to you. Sorry.
                    </Text>

                </mesh>

                //choice button one

                <mesh
                    scale={dialoG? 1:0}
                    position={[-1.5, 0.2, 0.3]}
                    onClick={() => {

                        if (dialIndex == 0) {

                            setchoiceUserIndex(3)


                        }
                        if (dialIndex == 1) {
                            setchoiceUserIndex(13)

                        }

                        if (dialIndex == 2) {
                            setchoiceUserIndex(22)
                            
                        }

                        if (dialIndex == 3) {

                            setchoiceUserIndex(31)
                            
                        }


                        if (dialIndex == 4) {
                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 5) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 6) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 7) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 8) {

                            //Input Submit Button
                            
                            if (nameValue == "") {
                                alert("Please fill out the fields.")
                            }
                            else if (feedValue == "") {
                                alert("Please fill out the fields.")
                            }
                            else {

                                setinputSwitch(false)
                                setchoiceUserIndex(40)
                                settalK(false)
                                handleSubmit(nameValue, feedValue, nickValue)
                                setnameValue("")
                                setfeedValue("")
                                setnickValue("")
                                logEvent(analytics, 'Entered Note');

                            }
                            
                        }

                        if (dialIndex == 9) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 10) {

                            setchoiceUserIndex(40)
                            settalK(false)

                        }

                        if (dialIndex == 11) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 12) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }


                        if (dialIndex == 13) {

                            if (index == 0) {

                                setIndex(1)

                            }
                            flyState = 1
                            setDialoG(!dialoG)
                            state.camera.lookAt(exitTalkPosition);
                            setHovered(false)
                            setchoiceUserIndex(0)
                            setdialIndex(0)
                            logEvent(analytics, 'Exit conversation peacefully.');
                        }

                    }}

                >

                    <planeGeometry args={[1.3, 0.7]} />

                    <meshStandardMaterial color={"blue"} />

                    <Text
                        fontSize={0.15}
                        font={"Philosopher"}
                        color={"white"}

                        maxWidth={1.3}
                        textAlign={"center"}
                    >
                        {choiceUser[choiceUserIndex]}
                    </Text>

                </mesh>

                //button 2


                <mesh
                    scale={talK? 1:0}
                    position={[-1.5, 0.95, 0.3]}
                    onClick={() => {

                        if (dialIndex == 0) {
                            setchoiceUserIndex(7)
                            logEvent(analytics, 'Got asked to enter note.');
                        }

                        if (dialIndex == 1) {
                            setchoiceUserIndex(16)

                        }

                        if (dialIndex == 2) {
                            setchoiceUserIndex(25)
                            setinputSwitch(true)
                            settalK(false)
                            logEvent(analytics, 'Recieved Input fields.');
                        }

                        if (dialIndex == 3) {

                            setchoiceUserIndex(34)

                        }


                        if (dialIndex == 4) {
                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 5) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 6) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 7) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 8) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 9) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 10) {

                            setchoiceUserIndex(40)
                            settalK(false)

                        }

                        if (dialIndex == 11) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 12) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }



                    }}


                >

                    <planeGeometry args={[1.3, 0.7]} />

                    <meshStandardMaterial color={"blue"} />

                    <Text
                        fontSize={0.15}
                        font={"Philosopher"}
                        color={"white"}

                        maxWidth={1.3}
                        textAlign={"center"}
                    >
                        {choiceUser[choiceUserIndex + 1]}
                    </Text>

                </mesh>

                <mesh
                    scale={talK? 1:0}
                    position={[-1.5, 1.7, 0.3]}
                    onClick={() => {

                        if (dialIndex == 0) {
                            setchoiceUserIndex(10)
                        }


                        if (dialIndex == 1) {
                            setchoiceUserIndex(19)

                        }

                        if (dialIndex == 2) {
                            setchoiceUserIndex(28)

                        }

                        if (dialIndex == 3) {

                            setchoiceUserIndex(37)

                        }


                        if (dialIndex == 4) {
                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 5) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 6) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 7) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 8) {

                            setchoiceUserIndex(40)
                            settalK(false)

                        }

                        if (dialIndex == 9) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 10) {

                            setchoiceUserIndex(40)
                            settalK(false)

                        }

                        if (dialIndex == 11) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                        if (dialIndex == 12) {

                            setchoiceUserIndex(40)
                            settalK(false)
                        }

                    }}


                >

                    <planeGeometry args={[1.3, 0.7]} />

                    <meshStandardMaterial color={"blue"} />

                    <Text
                        fontSize={0.15}
                        font={"Philosopher"}
                        color={"white"}

                        maxWidth={1.3}
                        textAlign={"center"}
                    >
                        {choiceUser[choiceUserIndex + 2]}
                    </Text>

                </mesh>


                <mesh
                    scale={inputSwitch? 1:0}
                    position={[-1.5, 1.7, 0.3]}
                >


                    <planeGeometry args={[1.3, 4]} />

                    <meshStandardMaterial
                        color={"green"}
                        transparent={true}
                        opacity={0}
                        
                    />

                    <Html

                        transform={true}
                        


                    >





                        <form


                            onSubmit={(event) => {

                                    

                                event.preventDefault();

                                setinputSwitch(false)

                                setchoiceUserIndex(40)

                                settalK(false)

                                handleSubmit(nameValue, feedValue, nickValue)


                                setnameValue("")


                                setfeedValue("")

                                setnickValue("")

                                logEvent(analytics, 'Entered note.');

                                }}

                            >


                            <div>

                                <input

                                    size={4}

                                    fontSize={0.3}



                                    placeholder={"Note"}


                                    value={feedValue}


                                    onChange={(e) => setfeedValue(e.target.value)}

                                    required

                                />





                            </div>


                            <div>

                                <input

                                    size={4}

                                    fontSize={0.3}



                                    placeholder={"Name"}


                                    value={nickValue}


                                    onChange={(e) => setnickValue(e.target.value)}

                                    required

                                />


                                
                            </div>


                            
                            <input

                                size={4}

                                fontSize={0.3}



                                type={"text"}


                                placeholder={"Email"}





                                value={nameValue}




                                onChange={(e) => setnameValue(e.target.value)}



                                required


                            />

                            <button hidden type="submit">Submit</button>

                        </form>

                        

                            


                    </Html >

            


                </mesh>

           

            </group>


        </Billboard>

    )
}


export function Flight() {

    const flyRef = useRef()

    var mobile = false

    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(navigator.userAgent)) {
        // Take the user to a different screen here.
        mobile = true
    }



    useFrame(() =>

    {       

        if (flyState == 2 || flyState == 3) {

            flyRef.current.movementSpeed = 0.03
            flyRef.current.rollSpeed = 0.02
            if (mobile == true) {

                flyRef.current.autoForward = false
        



            }
            
            
        }

        if (flyState == 0 || flyState == 1) {


            flyRef.current.movementSpeed = 20
            flyRef.current.rollSpeed = 1
            if (mobile == true) {

                flyRef.current.autoForward = true


            }



        }

        

    })

    


    return (


        <FlyControls


            ref={flyRef}

            autoForward={mobile ? true:false}

            movementSpeed={mobile ? 0.7:20}

            dragToLook={false}


            rollSpeed={mobile ? 0.2:1}




        />

                

    )
            

}


        



useGLTF.preload("/sparoch-ready-gltf.gltf");