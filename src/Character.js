/*
This file was generated by https://github.com/pmndrs/gltfjsx and then
customized manually. It uses drei's new useAnimations hook which extracts
all actions and sets up a THREE.AnimationMixer for it so that you don't have to.
All of the assets actions, action-names and clips are available in its output. 
*/

import React, { useEffect, useRef, useState, useCallback } from "react"
import { useGLTF, useTexture, useAnimations, Billboard, Text, FlyControls, DeviceOrientationControls } from "@react-three/drei"
import { a, useSpring } from "@react-spring/three"
import { useFrame } from "@react-three/fiber"
import { Clock, } from "three"
import * as THREE from 'three';



let flyState = 0

let dialogState = 0





function Dialog() {
    
    const dialogRef = useRef()

    return (null)               
     

}




export function CharA(props) {


    const { nodes, materials, animations } = useGLTF("/sparoch-ready-gltf.gltf")
    // Extract animation actions
    const { ref, actions, names } = useAnimations(animations)
    // Hover and animation-index states
    const [hovered, setHovered] = useState(false)
    const [dialoG, setDialoG] = useState(false)
    const [talK, settalK] = useState(false)
    const [index, setIndex] = useState(1)
    // Animate the selection halo
    const { color, scale } = useSpring({ scale: hovered ? [1.15, 1.15, 1] : [1, 1, 1], color: hovered ? "cyan" : "aquamarine" })
    // Change cursor on hover-state
    useEffect(() => void (document.body.style.cursor = hovered ? "pointer" : "auto"), [hovered])
    // Change animation when the index changes
    useEffect(() => {
        // Reset and fade in animation after an index has been changed
        actions[names[index]].reset().fadeIn(0.5).play()
        // In the clean-up phase, fade it out
        return () => actions[names[index]].fadeOut(0.5)
    }, [index, actions, names])

    console.log(scale)
    

    return (


        <Billboard


            position={[200, 300, -10]}
            follow={true}
            lockX={false}
            lockY={false}
            lockZ={false} // Lock the rotation on the z axis (default=false)
        >


            


            <group ref={ref} {...props} dispose={null}>
                <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
                    <primitive object={nodes.mixamorigHips} />

                    <skinnedMesh

                        castShadow
                        receiveShadow
                        onPointerOver={() => setHovered(true)}
                        onPointerOut={() => setHovered(false)}
                        onClick={() => setIndex((index + 1) % names.length)}

                        name="Beta_Joints"
                        geometry={nodes.Beta_Joints.geometry}
                        material={materials.Beta_Joints_MAT}
                        skeleton={nodes.Beta_Joints.skeleton}
                    />
                    <skinnedMesh

                        castShadow
                        receiveShadow
                        onPointerOver={() => setHovered(true)}
                        onPointerOut={() => setHovered(false)}
                        onClick={() => setIndex((index + 1) % names.length)}

                        name="Beta_Surface"
                        geometry={nodes.Beta_Surface.geometry}
                        material={materials["asdf1:Beta_HighLimbsGeoSG2"]}
                        skeleton={nodes.Beta_Surface.skeleton}
                    />


                </group>

                <a.mesh

                    position={[0, 1, -1]}
                    scale={scale}
                    onPointerOver={() => {
                        if (flyState != 3) {

                            setHovered(true)
                            flyState = 2

                        }
                        }}
                    onPointerOut={() => {
                        if (flyState != 3) {

                            setHovered(false)
                            flyState = 1


                        }
                        }}
                    onClick={() => {
                        if (flyState != 3) {

                            
                            flyState = 3
                            setDialoG(!dialoG)
                        }
                        }}

                >



                    <circleGeometry args={[1, 42]} />

                    <a.meshStandardMaterial color={color} />

                </a.mesh>


                <Text

                    position={[0, 2.2, 0]}

                    fontSize={0.13}
                    font={"Philosopher"}
                    color={"white"}
                    

                >



                    Hello there! How are you traveller?
                        

                </Text>

                <mesh
                    visible={dialoG}
                    position={[1.5, 1, 0.3]}
                    onClick={() => {
                        if (index == 0) {

                            setIndex(1)

                        }
                        flyState = 1
                        setDialoG(!dialoG)
                        settalK(false)
                        setHovered(false)
                    }}


                >

                    <planeGeometry args={[1.3,0.7]} />

                    <meshStandardMaterial color={"red"} />

                    <Text
                        fontSize={0.1}
                        font={"Philosopher"}
                        color={"white"}
                        
                        maxWidth={1.3}
                        textAlign={"center"}
                    >
                        I don't want to talk to you. Sorry.
                    </Text>

                </mesh>

                <mesh
                    visible={dialoG}
                    position={[-1.5, 0.2, 0.3]}
                    onClick={() => {
                        setIndex(0)
                        settalK(true)
                    }}


                >

                    <planeGeometry args={[1.3, 0.7]} />

                    <meshStandardMaterial color={"blue"} />

                    <Text
                        fontSize={0.1}
                        font={"Philosopher"}
                        color={"white"}

                        maxWidth={1.3}
                        textAlign={"center"}
                    >
                        Hello! Who are you?
                    </Text>

                </mesh>

                <mesh
                    visible={talK}
                    position={[-1.5, 0.95, 0.3]}
                    

                >

                    <planeGeometry args={[1.3, 0.7]} />

                    <meshStandardMaterial color={"blue"} />

                    <Text
                        fontSize={0.1}
                        font={"Philosopher"}
                        color={"white"}

                        maxWidth={1.3}
                        textAlign={"center"}
                    >
                        What did you say?
                    </Text>

                </mesh>

                <mesh
                    visible={talK}
                    position={[-1.5, 1.7, 0.3]}


                >

                    <planeGeometry args={[1.3, 0.7]} />

                    <meshStandardMaterial color={"blue"} />

                    <Text
                        fontSize={0.1}
                        font={"Philosopher"}
                        color={"white"}

                        maxWidth={1.3}
                        textAlign={"center"}
                    >
                        That sounds a lot of fun.
                    </Text>

                </mesh>


           

            </group>


        </Billboard>

    )
}


export function Flight() {

    const flyRef = useRef()


    useFrame(() =>
    {
        if (flyState == 2 || flyState == 3) {

            flyRef.current.movementSpeed = 0
            flyRef.current.rollSpeed = 0


        }

        if (flyState == 0 || flyState == 1) {

            flyRef.current.movementSpeed = 20
            flyRef.current.rollSpeed = 1



        }

        

    })

    


    return (


        <FlyControls


            ref={flyRef}

            movementSpeed={20}

            dragToLook={false}

            rollSpeed={1}




        />

                

    )
            

}


useGLTF.preload("/sparoch-ready-gltf.gltf");